        private async Task<bool> /*bool*/ orderSQLservice() {
            /// SQL Connection string
            string connString = textBoxSecretSQLconn.Text;
            if (connString == "") {
                connString = @"Server=192.168.1.99; Database=Live; uid=sa; pwd=s; connection timeout=30;";
                labelInfo2.Invoke(() => labelInfo2.Text = "textBoxSecretSQLconn boş olamaz ->" + connString);
            }
            /// change culture for numbers floating point
            System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo("en-us");

            /////
            /// create url for weborders (websiteURL returns Json)
            /////
            string url1 = Functions.createUrl4WebOrders(textBoxDaysAgo.Text, textBoxWebUsername.Text, textBoxWebUserPass.Text);
            labelInfo2.Invoke(() => labelInfo2.Text = url1);
            /// create weborder and get webOrders
            WebOrder webOrders = new WebOrder(url1);
            webOrders.getJsonFromWeb();
            webOrders.createDynamicVar();

            if (!Object.ReferenceEquals(null, webOrders.m_data.orders)) {
                labelInfo2.Invoke(() => labelInfo2.Text = webOrders.m_data.orders.Count.ToString());
            }
            else {
                return false;
            }
            /// ///
            /// Write orders to Sentez
            /// ///
            if (webOrders.m_data.orders.Count == 0) {
                labelInfo2.Invoke(() => labelInfo2.Text = "Sipariş yok");
            }
            else { /// There is an order
                foreach (var ordr in webOrders.m_data.orders) {
                    /// Check order status
                    if (!Object.ReferenceEquals(null, ordr.ord_status)) {
                        if (ordr.ord_status.ToString() == "1") {
                            notifyIcon1.BalloonTipText = "Yeni sipariş var.";
                            notifyIcon1.BalloonTipTitle = "UGSync";
                            notifyIcon1.ShowBalloonTip(5000);
                            notifyIcon1.ShowBalloonTip(1);
                            continue;
                        }
                        else if (ordr.ord_status.ToString() == "2") {
                            notifyIcon1.BalloonTipText = "Yeni EFT siparişi var.";
                            notifyIcon1.BalloonTipTitle = "UGSync";
                            notifyIcon1.ShowBalloonTip(5000);
                            notifyIcon1.ShowBalloonTip(1);
                            continue;
                        }
                        else if (ordr.ord_status.ToString() == "12") {
                            /// "Teslimata Hazırlanıyor"
                            /// Empty!!!
                        }
                        else {
                            continue;
                        }
                    }
                    else {
                        continue;
                    }
                    string specialCode = !Object.ReferenceEquals(null, ordr.ord_code) ? ordr.ord_code : "";
                    /////
                    /// Check Special code. If special code exist in SQL data then that order already been processed.
                    /////

                    string queryCountRecId = @"SELECT Count(RecId) as adet FROM  Erp_OrderReceipt WHERE SpecialCode = '" + specialCode + "'";
                    DataTable tableOrderSpecialCode = Functions.getDataFromSql(connString, queryCountRecId);

                    if (tableOrderSpecialCode.Rows.Count < 1) {
                        labelInfo2.Invoke(() => labelInfo2.Text = "tableOrderSpecialCode is empty");
                        break;
                    }

                    if (tableOrderSpecialCode.Rows.Count > 0 && tableOrderSpecialCode.Rows[0][0].ToString() == "0") {
                        /// Sentez doesn't have this order's special code 
                        /// make new order and get info from website
                        labelInfo2.Invoke(() => labelInfo2.Text = "Sipariş sentezde yok!");

                        /// ///
                        /// make account
                        /// ///
                        string accountCompanyId = "1";
                        string accountID = !Object.ReferenceEquals(null, ordr.ord_mmb_id) ? ordr.ord_mmb_id.ToString() : "";
                        string accountName = !Object.ReferenceEquals(null, ordr.ord_mmb_name) ? ordr.ord_mmb_name.ToString() : "";
                        string accountType = "2"; /// 1= satici, 2 = alici
                        string accountKind = "2"; /// 1= Şirket,  2 = Şahıs
                        string accountEmail = !Object.ReferenceEquals(null, ordr.ord_mmb_email) ? ordr.ord_mmb_email.ToString() : "";
                        string accountGsmPhone = !Object.ReferenceEquals(null, ordr.ord_billing_phone) ? ordr.ord_billing_phone.ToString() : "";
                        string accountTaxNo = !Object.ReferenceEquals(null, ordr.ord_billing_tax_number) ? ordr.ord_billing_tax_number.ToString() : "";
                        string accounhtInUSe = "1"; /// 1= checked
                        string accountProfession = "";
                        if (!Object.ReferenceEquals(null, ordr.member)) {
                            accountProfession = !Object.ReferenceEquals(null, ordr.member.mmb_job_name) ? ordr.member.mmb_job_name.ToString() : "";
                        }

                        ///ORDER ADRESS 001 = important                        
                        string queryGetBillTown = string.Format(@"SELECT RecId as adet FROM  Meta_District WHERE CodeN = '{0}'",
                                                                !Object.ReferenceEquals(null, ordr.ord_billing_town_id) ? ordr.ord_billing_town_id.ToString() : "");
                        DataTable tableBillTown = Functions.getDataFromSql(connString, queryGetBillTown);
                        string queryGetBillCity = string.Format(@"SELECT RecId as adet FROM  Meta_City WHERE CodeN = '{0}'",
                                                                !Object.ReferenceEquals(null, ordr.ord_billing_city_id) ? ordr.ord_billing_city_id.ToString() : "");
                        DataTable tableBillCity = Functions.getDataFromSql(connString, queryGetBillCity);

                        string accountBillTaxOffice = "";
                        if (!Object.ReferenceEquals(null, ordr.ord_billing_tax_office)) {
                            if (ordr.ord_billing_tax_office != "") {
                                accountBillTaxOffice = ordr.ord_billing_tax_office; /// write this in erp_current account -> blog
                            }
                        }
                        string accountBillAddressType = "1";
                        if (!Object.ReferenceEquals(null, ordr.ord_billing_firm_name)) {
                            if (ordr.ord_billing_firm_name != "") {
                                accountName = ordr.ord_billing_firm_name;
                                accountBillAddressType = "2";
                            }
                        }
                        
                        string accountBillExplanation = !Object.ReferenceEquals(null, ordr.ord_billing_name) ? ordr.ord_billing_name.ToString() : accountName;
                        string accountBillAddressCode = "001"; /// first in adress list
                        string accountBillTown = tableBillTown.Rows.Count > 0 ? tableBillTown.Rows[0][0].ToString() : "";
                        string accountBillCity = tableBillCity.Rows.Count > 0 ? tableBillCity.Rows[0][0].ToString() : "";
                        string accountBillCountry = "186"; /// Turkey
                        string accountBillAddressInUse = "1";
                        string accountBillAddress = !Object.ReferenceEquals(null, ordr.ord_billing_address) ? ordr.ord_billing_address.ToString() : "";
                        accountBillAddress = Regex.Replace(accountBillAddress, @"[\r\n'/\\]", " ");
                        var accountBillAddressList = stringSpliter(accountBillAddress, 49);

                        string accountBillAddress1 = "";
                        string accountBillAddress2 = "";
                        string accountBillAddress3 = "";
                        try {
                            if (accountBillAddressList.ToArray().Count() == 1) {
                                accountBillAddress1 = accountBillAddressList.ToArray()[0].ToString();
                            }
                            else if (accountBillAddressList.ToArray().Count() == 2) {
                                accountBillAddress1 = accountBillAddressList.ToArray()[0].ToString();
                                accountBillAddress2 = accountBillAddressList.ToArray()[1].ToString();
                            }
                            else if (accountBillAddressList.ToArray().Count() == 3) {
                                accountBillAddress1 = accountBillAddressList.ToArray()[0].ToString();
                                accountBillAddress2 = accountBillAddressList.ToArray()[1].ToString();
                                accountBillAddress3 = accountBillAddressList.ToArray()[2].ToString();
                            }
                            // else too big address 
                        }
                        catch (Exception) {}

                        ///Shipment Adress 002
                        string queryGetShippingTown = string.Format(@"SELECT RecId as adet FROM  Meta_District WHERE CodeN = '{0}'",
                                                                    !Object.ReferenceEquals(null, ordr.ord_shipping_town_id) ? ordr.ord_shipping_town_id.ToString() : "");
                        DataTable tableShippingTown = Functions.getDataFromSql(connString, queryGetShippingTown);
                        string queryGetShippingCity = string.Format(@"SELECT RecId as adet FROM  Meta_City WHERE CodeN = '{0}'",
                                                                    !Object.ReferenceEquals(null, ordr.ord_shipping_city_id) ? ordr.ord_shipping_city_id.ToString() : "");
                        DataTable tableShippingCity = Functions.getDataFromSql(connString, queryGetShippingCity);

                        string accountAddressCode = "002";/// second in adress list
                        string accountAddressType = "1";
                        string accountTown = tableShippingTown.Rows.Count > 0 ? tableShippingTown.Rows[0][0].ToString() : "";
                        string accountCity = tableShippingCity.Rows.Count > 0 ? tableShippingCity.Rows[0][0].ToString() : "";
                        string accountCountry = "186"; /// Turkey
                        string accountAddressInUse = "1";
                        string accountCategoryId = "2";
                        string accountAddress = !Object.ReferenceEquals(null, ordr.ord_shipping_address) ? ordr.ord_shipping_address.ToString() : ""; /// yowyowyow
                        accountAddress = Regex.Replace(accountAddress, @"[\r\n'/\\]", " ");
                        var accountAddressList = stringSpliter(accountAddress, 49);
                        string accountAddress1 = "";
                        string accountAddress2 = "";
                        string accountAddress3 = "";
                        try {
                            if (accountAddressList.ToArray().Count() == 1) {
                                accountAddress1 = accountAddressList.ToArray()[0].ToString();
                            }
                            else if (accountAddressList.ToArray().Count() == 2) {
                                accountAddress1 = accountAddressList.ToArray()[0].ToString();
                                accountAddress2 = accountAddressList.ToArray()[1].ToString();
                            }
                            else if (accountAddressList.ToArray().Count() == 3) {
                                accountAddress1 = accountAddressList.ToArray()[0].ToString();
                                accountAddress2 = accountAddressList.ToArray()[1].ToString();
                                accountAddress3 = accountAddressList.ToArray()[2].ToString();
                            }
                            // else too big address 
                        }
                        catch (Exception) {}

                        /// ///
                        /// Check account(cari) if sentez does NOT has the account(via email) then create it
                        /// ///
                        if (accountID == "0") {
                            /// Id 0! Websiteye uye degil. Senteze de cari hesabı var mı? Emailden kontrol et.(account code = UGHNED)
                            DataTable tableAccount = new DataTable();
                            string queryAccount = @"SELECT Count(RecId) as adet FROM  Erp_CurrentAccount WHERE EMail = '" + accountEmail + "'";
                            tableAccount = Functions.getDataFromSql(connString, queryAccount);
                            if (tableAccount.Rows.Count < 1) {
                                labelInfo2.Invoke(() => labelInfo2.Text = "tableAccount is empty");
                                break;
                            }
                            labelInfo2.Invoke(() => labelInfo2.Text = "Siteye üye mi ? (0 = üye değil) ->" + tableAccount.Rows[0][0]);

                            /// insert account
                            accountID = !Object.ReferenceEquals(null, ordr.ord_code) ? ordr.ord_code : "";
                            List<Functions.SqlObj> SqlObjsAccount1 = new List<Functions.SqlObj> {
                                new Functions.SqlObj("CompanyId", accountCompanyId, false),  
                                new Functions.SqlObj("CurrentAccountCode", specialCode), 
                                new Functions.SqlObj("CurrentAccountName", accountName),
                                new Functions.SqlObj("CurrentAccountType", accountType, false),
                                new Functions.SqlObj("CurrentAccountKind", accountKind, false),
                                new Functions.SqlObj("EMail", accountEmail),
                                new Functions.SqlObj("Blog", accountBillTaxOffice),
                                new Functions.SqlObj("GsmPhone", accountGsmPhone),
                                new Functions.SqlObj("TaxNo", accountTaxNo),
                                new Functions.SqlObj("InUse", accounhtInUSe, false),
                                new Functions.SqlObj("Profession", accountProfession),
                                new Functions.SqlObj("CategoryId", accountCategoryId)
                            };
                            Functions.insertToSQL(connString, "Erp_CurrentAccount", SqlObjsAccount1.ToArray());

                            /// Get newly created account's recid to insert address
                            string newAccountsRecId = "";
                            newAccountsRecId = Functions.executeScalar(connString, string.Format(@"SELECT RecId FROM  Erp_CurrentAccount WHERE EMail = '{0}' ORDER BY RecId DESC", accountEmail));
                            if (string.IsNullOrEmpty(newAccountsRecId)) {
                                labelInfo2.Invoke(() => labelInfo2.Text = "newAccountsRecId is empty");
                                break;
                            }

                            /// insert addresses
                            List<Functions.SqlObj> SqlObjsAddress = new List<Functions.SqlObj> {
                                new Functions.SqlObj("AddressCode", accountBillAddressCode),
                                new Functions.SqlObj("CurrentAccountId", newAccountsRecId),
                                new Functions.SqlObj("AddressType", accountBillAddressType, false),
                                new Functions.SqlObj("Line1", accountBillAddress1),
                                new Functions.SqlObj("Line2", accountBillAddress2),
                                new Functions.SqlObj("Line3", accountBillAddress3),
                                new Functions.SqlObj("DistrictId", accountBillTown, false),
                                new Functions.SqlObj("CityId", accountBillCity, false),
                                new Functions.SqlObj("CountryId", accountBillCountry, false),
                                new Functions.SqlObj("InUse", accountBillAddressInUse, false)
                            };
                            Functions.insertToSQL(connString, "Erp_Address", SqlObjsAddress.ToArray());

                            List<Functions.SqlObj> SqlObjsAddress2 = new List<Functions.SqlObj> {
                                new Functions.SqlObj("AddressCode", accountAddressCode),
                                new Functions.SqlObj("CurrentAccountId", newAccountsRecId),
                                new Functions.SqlObj("AddressType", accountAddressType, false),
                                new Functions.SqlObj("Line1", accountAddress1),
                                new Functions.SqlObj("Line2", accountAddress2),
                                new Functions.SqlObj("Line3", accountAddress3),
                                new Functions.SqlObj("DistrictId", accountTown, false),
                                new Functions.SqlObj("CityId", accountCity, false),
                                new Functions.SqlObj("CountryId", accountCountry, false),
                                new Functions.SqlObj("InUse", accountAddressInUse, false)
                            };
                            Functions.insertToSQL(connString, "Erp_Address", SqlObjsAddress2.ToArray());

                            /// ///
                            /// if email of this account exist in database, make this account, subaccount to existing account 
                            /// ///
                            string parentAccountRecId = "";
                            parentAccountRecId = Functions.executeScalar(connString, string.Format(@"SELECT RecId FROM Erp_CurrentAccount WHERE EMail = '{0}' ORDER BY RecId ASC", accountEmail));
                            if (!string.IsNullOrEmpty(parentAccountRecId) && parentAccountRecId != newAccountsRecId) {
                                /// there is a parent account for this account. Update this acc
                                Functions.sendSQLCommand(connString, string.Format(@"UPDATE Erp_CurrentAccount SET ParentId = {0} WHERE RecID = {1}", parentAccountRecId, newAccountsRecId));
                            }

                        }
                        else {
                            ///  Siteye uye, Id 0 degil! (account code = 110122), sentezde cari mi kontrol et
                            string getCurrentAccountCode = string.Format(@"SELECT CurrentAccountCode, EMail FROM  Erp_CurrentAccount WHERE CurrentAccountCode = '{0}' or CurrentAccountCode = '{1}' or EMail = '{2}' ORDER BY RecId ASC",
                                                                        accountID, 
                                                                        accountEmail, 
                                                                        accountEmail);

                            /// get recID from existing account
                            DataTable tableExistingAccountCode = new DataTable();
                            tableExistingAccountCode = Functions.getDataFromSql(connString, getCurrentAccountCode);
                            if (tableExistingAccountCode.Rows.Count < 1) {
                                labelInfo2.Invoke(() => labelInfo2.Text = "tableExistingAccountCode is empty");
                            }

                            if (tableExistingAccountCode.Rows.Count > 1) {
                                /// account exist
                                accountID = accountID + "_" +DateTime.Now.ToString("dd/MM");
                            }

                            /// insert account
                            List<Functions.SqlObj> SqlObjsAccount2 = new List<Functions.SqlObj> {
                                new Functions.SqlObj("CompanyId", accountCompanyId, false), // 
                                new Functions.SqlObj("CurrentAccountCode", accountID),
                                new Functions.SqlObj("CurrentAccountName", accountName),
                                new Functions.SqlObj("CurrentAccountType", accountType, false),
                                new Functions.SqlObj("CurrentAccountKind", accountKind, false),
                                new Functions.SqlObj("EMail", accountEmail),
                                new Functions.SqlObj("Blog", accountBillTaxOffice),
                                new Functions.SqlObj("GsmPhone", accountGsmPhone),
                                new Functions.SqlObj("TaxNo", accountTaxNo),
                                new Functions.SqlObj("InUse", accounhtInUSe, false),
                                new Functions.SqlObj("Profession", accountProfession),
                                new Functions.SqlObj("CategoryId", accountCategoryId)
                            };
                            Functions.insertToSQL(connString, "Erp_CurrentAccount", SqlObjsAccount2.ToArray());

                            /// Get newly created account's recid to insert address
                            string newAccountsRecId2 = "";
                            newAccountsRecId2 = Functions.executeScalar(connString, string.Format(@"SELECT RecId FROM  Erp_CurrentAccount WHERE EMail = '{0}' ORDER BY RecId DESC", accountEmail));
                            if (string.IsNullOrEmpty(newAccountsRecId2)) {
                                labelInfo2.Invoke(() => labelInfo2.Text = "newAccountsRecId2 is empty.");
                                break;
                            }

                            List<Functions.SqlObj> SqlObjsAddress = new List<Functions.SqlObj> {
                                new Functions.SqlObj("AddressCode", accountBillAddressCode),
                                new Functions.SqlObj("CurrentAccountId", newAccountsRecId2),
                                new Functions.SqlObj("AddressType", accountBillAddressType, false),
                                new Functions.SqlObj("Line1", accountBillAddress1),
                                new Functions.SqlObj("Line2", accountBillAddress2),
                                new Functions.SqlObj("Line3", accountBillAddress3),
                                new Functions.SqlObj("DistrictId", accountBillTown, false),
                                new Functions.SqlObj("CityId", accountBillCity, false),
                                new Functions.SqlObj("CountryId", accountBillCountry, false),
                                new Functions.SqlObj("InUse", accountBillAddressInUse, false)
                            };
                            Functions.insertToSQL(connString, "Erp_Address", SqlObjsAddress.ToArray());

                            List<Functions.SqlObj> SqlObjsAddress2 = new List<Functions.SqlObj> {
                                new Functions.SqlObj("AddressCode", accountAddressCode),
                                new Functions.SqlObj("CurrentAccountId", newAccountsRecId2),
                                new Functions.SqlObj("AddressType", accountAddressType, false),
                                new Functions.SqlObj("Line1", accountAddress1),
                                new Functions.SqlObj("Line2", accountAddress2),
                                new Functions.SqlObj("Line3", accountAddress3),
                                new Functions.SqlObj("DistrictId", accountTown, false),
                                new Functions.SqlObj("CityId", accountCity, false),
                                new Functions.SqlObj("CountryId", accountCountry, false),
                                new Functions.SqlObj("InUse", accountAddressInUse, false)
                            };
                            Functions.insertToSQL(connString, "Erp_Address", SqlObjsAddress2.ToArray());

                            /// ///
                            /// if email of this account exist in database, make this account, subaccount to existing account 
                            /// ///
                            string parentAccountRecId2 = "";
                            parentAccountRecId2 = Functions.executeScalar(connString, string.Format(@"SELECT RecId FROM Erp_CurrentAccount WHERE EMail = '{0}' ORDER BY RecId ASC", accountEmail));
                            if (!string.IsNullOrEmpty(parentAccountRecId2) && parentAccountRecId2 != newAccountsRecId2) {
                                /// there is a parent account for this account. Update this acc
                                Functions.sendSQLCommand(connString, string.Format(@"UPDATE Erp_CurrentAccount SET ParentId = {0} WHERE RecID = {1}", parentAccountRecId2, newAccountsRecId2));
                            }
                        }

                        /// ///
                        /// irsaliye olustur
                        /// ///
                        
                        ///make receiptno
                        string querryGetLastReciptNo = @"SELECT ReceiptNo FROM  Erp_OrderReceipt WHERE ReceiptType = 2 ORDER BY ReceiptNo DESC";
                        DataTable tableLastReceiptNo = Functions.getDataFromSql(connString, querryGetLastReciptNo);

                        /// get addressID
                        string queryRecIdFromErp_CurrentAccount = string.Format(@"SELECT RecId FROM  Erp_CurrentAccount WHERE EMail = '{0}'", accountEmail);
                        DataTable tableRecIdFromErp_CurrentAccount = Functions.getDataFromSql(connString, queryRecIdFromErp_CurrentAccount);
                        if (tableRecIdFromErp_CurrentAccount.Rows.Count < 1) {
                            queryRecIdFromErp_CurrentAccount = string.Format(@"SELECT RecId FROM  Erp_CurrentAccount WHERE CurrentAccountCode = '{0}'", accountID);
                            tableRecIdFromErp_CurrentAccount = Functions.getDataFromSql(connString, queryRecIdFromErp_CurrentAccount);
                            if (tableRecIdFromErp_CurrentAccount.Rows.Count < 1) {
                                labelInfo2.Invoke(() => labelInfo2.Text = "tableRecIdFromErp_CurrentAccount is empty");
                            }
                        }

                        /// get RecId from Erpaddress
                        string queryRecIdFromErp_Address = string.Format(@"SELECT RecId FROM  Erp_Address WHERE CurrentAccountId = {0} and AddressCode = {1}",
                                                                          tableRecIdFromErp_CurrentAccount.Rows.Count > 0 ? tableRecIdFromErp_CurrentAccount.Rows[0][0].ToString() : "",
                                                                          accountBillAddressCode);
                        DataTable tableAccountAddressId = Functions.getDataFromSql(connString, queryRecIdFromErp_Address);
                        if (tableAccountAddressId.Rows.Count < 1) {
                            labelInfo2.Invoke(() => labelInfo2.Text = "tableAccountAddressId is empty");
                        }

                        string queryRecIdFromErp_Address2 = string.Format(@"SELECT RecId FROM  Erp_Address WHERE CurrentAccountId = {0} and AddressCode = {1}",
                                                                          tableRecIdFromErp_CurrentAccount.Rows.Count > 0 ? tableRecIdFromErp_CurrentAccount.Rows[0][0].ToString() : "",
                                                                          accountAddressCode);
                        DataTable tableAccountAddressId2 = Functions.getDataFromSql(connString, queryRecIdFromErp_Address2);
                        if (tableAccountAddressId2.Rows.Count < 1) {
                            labelInfo2.Invoke(() => labelInfo2.Text = "tableAccountAddressId2 is empty");
                        }

                        /// getRecId from erp_current account
                        string querryRecIdFromErp_Account = string.Format(@"SELECT RecId FROM  Erp_CurrentAccount WHERE EMail = '{0}'", accountEmail);
                        DataTable tableRecIdFromErp_Account = Functions.getDataFromSql(connString, querryRecIdFromErp_Account);
                        if (tableRecIdFromErp_Account.Rows.Count < 1) {
                            labelInfo2.Invoke(() => labelInfo2.Text = "tableRecIdFromErp_Account is empty");
                        }

                        /// getRecId from Erp_PaymentPlan account
                        string querryRecIdFromErp_PaymentPlan = string.Format(@"SELECT RecId FROM  Erp_PaymentPlan WHERE PlanCode = '{0}'",
                                                                              !Object.ReferenceEquals(null, ordr.pop_code) ? ordr.pop_code.ToString() : "");
                        DataTable tableRecIdFromErp_PaymentPlan = Functions.getDataFromSql(connString, querryRecIdFromErp_PaymentPlan);
                        if (tableRecIdFromErp_PaymentPlan.Rows.Count < 1) {
                            labelInfo2.Invoke(() => labelInfo2.Text = "tableRecIdFromErp_PaymentPlan is empty");
                        }


                        string kargoName = !Object.ReferenceEquals(null, ordr.crg_name) ? ordr.crg_name.ToString() : "";
                        /// getRecId from erp_current account
                        string querryRecIdFromErp_Transporter = string.Format(@"SELECT RecId FROM  Erp_Transporter WHERE TransporterCode = '{0}'", kargoName);
                        DataTable tableRecIdFromErp_Transporter = Functions.getDataFromSql(connString, querryRecIdFromErp_Transporter);
                        if (tableRecIdFromErp_Transporter.Rows.Count < 1) {
                            labelInfo2.Invoke(() => labelInfo2.Text = "tableRecIdFromErp_Transporter is empty");
                        }
                        string kargoNameId = tableRecIdFromErp_Transporter.Rows.Count > 0 ? tableRecIdFromErp_Transporter.Rows[0][0].ToString() : "";

                        string receiptCompanyId = "1";
                        string receiptReceiptType = "2"; /// 1=alış siparişi, 2=satış siparişi
                        string receiptReceiptNo = string.Format("{0:00000000}", (Convert.ToInt32(tableLastReceiptNo.Rows.Count > 0 ? tableLastReceiptNo.Rows[0][0].ToString() : "") + 1)); // make receiptNo
                        labelInfo2.Invoke(() => labelInfo2.Text = "receiptReceiptNo ->" + receiptReceiptNo);

                        string receiptReceiptDate = !Object.ReferenceEquals(null, ordr.ord_insert_date) ? ordr.ord_insert_date.ToString() : "";
                        string receiptReceiptTime = !Object.ReferenceEquals(null, ordr.ord_insert_date) ? ordr.ord_insert_date.ToString() : "";
                        string receiptCurrentAccountId = tableRecIdFromErp_Account.Rows.Count > 0 ? tableRecIdFromErp_Account.Rows[0][0].ToString() : ""; // check this
                        labelInfo2.Invoke(() => labelInfo2.Text = string.Format("receiptCurrentAccountId -> {0}", receiptCurrentAccountId));

                        string receiptShippingAddressId = tableAccountAddressId.Rows.Count > 0 ? tableAccountAddressId.Rows[0][0].ToString() : "";
                        string receiptBillingAddressId = tableAccountAddressId2.Rows.Count > 0 ? tableAccountAddressId2.Rows[0][0].ToString() : "";

                        string receiptWarehouseId = "1";
                        string receiptSpecialCode = !Object.ReferenceEquals(null, ordr.ord_code) ? ordr.ord_code.ToString() : "";

                        string receiptReceiptUpType = "0";
                        string receiptReceiptSubType = "0";
                        string receiptIsTaxExempted = "0";
                        string receiptShipmentType = "1";
                        //string receiptSubTotal = ordr.ord_grand_total;

                        string receiptVatAmount = "";
                        if (!Object.ReferenceEquals(null, ordr.ord_tax_total)) {
                            receiptVatAmount = Convert.ToDouble(ordr.ord_tax_total.ToString()).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture);
                        }
                        else {
                            receiptVatAmount = "";
                        }

                        //string receiptDiscountsTotal = ordr..ToString();
                        string receiptGrandTotal = "";

                        if (!Object.ReferenceEquals(null, ordr.ord_grand_total)) {
                            receiptGrandTotal = Convert.ToDouble(ordr.ord_grand_total.ToString()).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture);
                        }

                        string receiptIsEximReceipt = "0";
                        string receiptIsApproved = "1";
                        string receiptControlCode = "0";
                        string receiptInsertedAt = !Object.ReferenceEquals(null, ordr.ord_insert_date) ? ordr.ord_insert_date.ToString() : "";
                        string receiptUpdatedAt = !Object.ReferenceEquals(null, ordr.ord_update_date) ? ordr.ord_update_date.ToString() : "";
                        string receiptInsertedBy = "6";
                        string receiptIsDeleted = "0";
                        string receiptCustomerOrderNo = !Object.ReferenceEquals(null, ordr.ord_id) ? ordr.ord_id.ToString() : "";
                        string receiptPaymentPlanId = tableRecIdFromErp_PaymentPlan.Rows.Count > 0 ? tableRecIdFromErp_PaymentPlan.Rows[0][0].ToString() : "";
                        string receiptExplanation = "";

                        /// explanation
                        if (!Object.ReferenceEquals(null, ordr.pop_code)) {
                            if (ordr.pop_code == "ccp" || ordr.pop_code == "ccp3d" || ordr.pop_code == "cct" || ordr.pop_code == "cct3d") {
                                receiptExplanation = string.Format("{0} kodlu sipariş, {1} isimli şahsa ait {2} ile tahsil edilmiştir.",
                                                                 specialCode,
                                                                 (!Object.ReferenceEquals(null, ordr.ord_ccowner) ? ordr.ord_ccowner.ToString() : ". . . . . . . . . . . . . ."),
                                                                 "kredi kartı");

                            }
                            else if (ordr.pop_code == "mo") {
                                receiptExplanation = string.Format("{0} kodlu sipariş, {1} isimli şahsa ait {2} ile tahsil edilmiştir.",
                                                                specialCode,
                                                                (!Object.ReferenceEquals(null, ordr.ord_ccowner) ? ordr.ord_ccowner.ToString() : ". . . . . . . . . . . . . ."),
                                                                "EFT");
                            }
                            else {
                                receiptExplanation = string.Format("{0} kodlu sipariş, {1} isimli şahsa ait {2} ile tahsil edilmiştir.",
                                                                specialCode,
                                                                (!Object.ReferenceEquals(null, ordr.ord_ccowner) ? ordr.ord_ccowner.ToString() : ". . . . . . . . . . . . . ."),
                                                                ". . . . . . . . . . . ");
                            }
                        }
                        else {
                            receiptExplanation = string.Format("{0} kodlu sipariş, {1} isimli şahsa ait {2} ile tahsil edilmiştir.",
                                                               specialCode,
                                                               (!Object.ReferenceEquals(null, ordr.ord_ccowner) ? ordr.ord_ccowner.ToString() : ". . . . . . . . . . . . . ."),
                                                               ". . . . . . . . . . . ");
                        }


                        /// insert receipt to SQL data
                        List<Functions.SqlObj> SqlObjReceipts = new List<Functions.SqlObj> {
                                new Functions.SqlObj("CompanyId", receiptCompanyId, false),                          new Functions.SqlObj("ReceiptUpType", receiptReceiptUpType, false),                new Functions.SqlObj("InsertedAt", receiptInsertedAt),
                                new Functions.SqlObj("ReceiptType", receiptReceiptType, false),                      new Functions.SqlObj("ReceiptSubType", receiptReceiptSubType, false),              new Functions.SqlObj("UpdatedAt", receiptUpdatedAt),
                                new Functions.SqlObj("ReceiptNo", receiptReceiptNo),                                 new Functions.SqlObj("IsTaxExempted", receiptIsTaxExempted, false),                new Functions.SqlObj("InsertedBy", receiptInsertedBy, false),
                                new Functions.SqlObj("ReceiptDate", receiptReceiptDate),                             new Functions.SqlObj("ShipmentType", receiptShipmentType, false),                  new Functions.SqlObj("IsDeleted", receiptIsDeleted, false),
                                new Functions.SqlObj("ReceiptTime", receiptReceiptTime),                             new Functions.SqlObj("VatAmount", receiptVatAmount,false),                         new Functions.SqlObj("CustomerOrderNo", receiptCustomerOrderNo),
                                new Functions.SqlObj("CurrentAccountId", receiptCurrentAccountId, false),            new Functions.SqlObj("GrandTotal", receiptGrandTotal, false),                      new Functions.SqlObj("PaymentPlanId", receiptPaymentPlanId, false),
                                new Functions.SqlObj("AddressId", receiptBillingAddressId),                          new Functions.SqlObj("ShippingAddressId", receiptShippingAddressId),        new Functions.SqlObj("IsEximReceipt", receiptIsEximReceipt, false),
                                new Functions.SqlObj("WarehouseId", receiptWarehouseId, false),                      new Functions.SqlObj("IsApproved", receiptIsApproved, false),                      new Functions.SqlObj("Explanation", receiptExplanation),
                                new Functions.SqlObj("SpecialCode", receiptSpecialCode),                             new Functions.SqlObj("ControlCode", receiptControlCode, false),                    new Functions.SqlObj("TransporterId", kargoNameId)
                                //UD_Email what the hell is this
                            };
                        Functions.insertToSQL(connString, "Erp_OrderReceipt", SqlObjReceipts.ToArray());

                        /// ///
                        /// insert order receipt items 
                        /// ///
                        /// get ReciptId
                        string querryGetReciptId = string.Format(@"SELECT RecId FROM  Erp_OrderReceipt WHERE SpecialCode = '{0}'", receiptSpecialCode);
                        DataTable tableReceiptId = Functions.getDataFromSql(connString, querryGetReciptId);

                        string itemOrderReceiptId = "";

                        if (tableReceiptId.Rows.Count < 1) {
                            labelInfo2.Invoke(() => labelInfo2.Text = "tableReceiptId is empty");
                            itemOrderReceiptId = "";
                        }
                        else {
                            itemOrderReceiptId = tableReceiptId.Rows.Count > 0 ? tableReceiptId.Rows[0][0].ToString() : "";
                        }
                        string itemReceiptDate = !Object.ReferenceEquals(null, ordr.ord_insert_date) ? ordr.ord_insert_date.ToString() : "";
                        string itemReceiptType = "2";
                        string itemReceiptSubType = "0";
                        string itemWarehouseId = "1";
                        string itemItemType = "1";
                        string itemUnitId = "51";
                        string itemVatIncluded = "1";
                        string itemCalcType = "0";
                        string itemIsTaxExempted = "0";
                        string itemIsReserved = "1";
                        string itemIsClosed = "0";
                        string itemIsApproved = "1";
                        string itemControlCode = "0";
                        string itemInsertedBy = "6";
                        string itemIsDeleted = "0";
                        string itemInsertedAt = !Object.ReferenceEquals(null, ordr.ord_insert_date) ? ordr.ord_insert_date.ToString() : "";
                        string itemIsWClosed = "0";

                        int i = 1;
                        double receiptSubTotal = 0;
                        double receiptDiscountsTotal = 0;

                        if (!Object.ReferenceEquals(null, ordr.products)) {
                            foreach (var item in ordr.products) {
                                labelInfo2.Invoke(() => labelInfo2.Text = "boşş mu?" + item.orp_barcode.ToString());
                                /// get InventoryId
                                string querryGetInventoryId = string.Format(@"SELECT RecId FROM  Erp_Inventory WHERE InventoryCode = '{0}'", item.orp_barcode.ToString());
                                DataTable tableInventoryId = Functions.getDataFromSql(connString, querryGetInventoryId);

                                if (tableInventoryId.Rows.Count < 1) {
                                    labelInfo2.Invoke(() => labelInfo2.Text = "tableInventoryId is empty " + querryGetInventoryId);
                                }
                                /// ///
                                /// floating point adjustments
                                /// ///
                                string itemItemOrderNo = i++.ToString();
                                string itemInventoryId = tableInventoryId.Rows.Count > 0 ? tableInventoryId.Rows[0][0].ToString() : "";
                                string itemQuantity = Convert.ToDouble(item.orp_quantity.ToString()).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture);
                                string itemNetQuantity = Convert.ToDouble(item.orp_quantity.ToString()).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture);
                                string itemUnitPrice = Convert.ToDouble(item.orp_unit_tprice.ToString()).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture);
                                string itemVatRate = Convert.ToDouble(item.orp_tax_rate.ToString()).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture);
                                string itemExpenseRate = Convert.ToDouble(item.orp_tax_rate.ToString()).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture);
                                string itemVatAmount = Convert.ToDouble(item.orp_tax.ToString()).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture);
                                string itemVatBaseAmount = Convert.ToDouble(item.orp_total.ToString()).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture);
                                string itemItemTotal = (Convert.ToDouble(item.orp_unit_price.ToString()) *
                                                       Convert.ToDouble(item.orp_quantity.ToString())).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture);
                                string itemDiscountsTotal = ((Convert.ToDouble(item.orp_unit_price.ToString()) -
                                                              Convert.ToDouble(item.orp_price.ToString())) *
                                                              Convert.ToDouble(item.orp_quantity.ToString())).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture); //// discountamount1 + discountamount2+ discountamount3 ... 
                                string itemNetUnitPrice = Convert.ToDouble(item.orp_price.ToString()).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture);
                                string itemNetItemTotal = Convert.ToDouble(item.orp_total.ToString()).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture);

                                /// insert  receipt items
                                List<Functions.SqlObj> SqlObjReceiptItems = new List<Functions.SqlObj> {
                                new Functions.SqlObj("OrderReceiptId", itemOrderReceiptId, false),    new Functions.SqlObj("ReceiptType",itemReceiptType, false),             new Functions.SqlObj("ReceiptSubType", itemReceiptSubType, false),
                                new Functions.SqlObj("ReceiptDate", itemReceiptDate),                 new Functions.SqlObj("WarehouseId", itemWarehouseId, false),            new Functions.SqlObj("ItemType", itemItemType, false),
                                new Functions.SqlObj("ItemOrderNo", itemItemOrderNo,false),           new Functions.SqlObj("InventoryId", itemInventoryId, false),            new Functions.SqlObj("UnitId", itemUnitId, false),
                                new Functions.SqlObj("Quantity", itemQuantity, false),                new Functions.SqlObj("NetQuantity", itemQuantity, false),               new Functions.SqlObj("UnitPrice", itemUnitPrice, false),
                                new Functions.SqlObj("VatIncluded", itemVatIncluded, false),          new Functions.SqlObj("VatRate", itemVatRate, false),                    new Functions.SqlObj("CalcType", itemCalcType, false),
                                new Functions.SqlObj("ExpenseRate", itemExpenseRate, false),          new Functions.SqlObj("VatAmount", itemVatAmount, false),                new Functions.SqlObj("VatBaseAmount", itemVatBaseAmount, false),
                                new Functions.SqlObj("ItemTotal", itemItemTotal, false),
                                new Functions.SqlObj("DiscountsTotal", itemDiscountsTotal, false),    new Functions.SqlObj("NetUnitPrice", itemNetUnitPrice, false),          new Functions.SqlObj("NetItemTotal", itemItemTotal, false),
                                new Functions.SqlObj("IsTaxExempted", itemIsTaxExempted, false),      new Functions.SqlObj("IsReserved", itemIsReserved, false),              new Functions.SqlObj("IsClosed", itemIsClosed, false),
                                new Functions.SqlObj("IsWClosed", itemIsWClosed, false),
                                new Functions.SqlObj("IsApproved", itemIsApproved, false),            new Functions.SqlObj("ControlCode", itemControlCode, false),            new Functions.SqlObj("InsertedAt", itemInsertedAt),
                                new Functions.SqlObj("InsertedBy", itemInsertedBy, false),            new Functions.SqlObj("IsDeleted", itemIsDeleted, false)
                                    //UD_Email what the hell is this
                                };
                                Functions.insertToSQL(connString, "Erp_OrderReceiptItem", SqlObjReceiptItems.ToArray());

                                /// for receipt update
                                receiptSubTotal += Convert.ToDouble(item.orp_unit_price) * Convert.ToDouble(item.orp_quantity);

                                if (Convert.ToDouble(item.orp_discount_rate.ToString()) > 0) {
                                    /// if there is discount (indirim varsa)
                                    /// get ReciptId
                                    string querryDiscountParentItemId = string.Format(@"SELECT Top 1 RecId FROM  Erp_OrderReceiptItem WHERE OrderReceiptId = '{0}' ORDER BY ItemOrderNo DESC", itemOrderReceiptId);
                                    DataTable tableDiscountParentItemId = Functions.getDataFromSql(connString, querryDiscountParentItemId);

                                    string itemDiscountParentItemId = "";
                                    if (tableDiscountParentItemId.Rows.Count < 1) {
                                        labelInfo2.Invoke(() => labelInfo2.Text = "tableDiscountParentItemId is empty");
                                    }
                                    else {
                                        itemDiscountParentItemId = tableDiscountParentItemId.Rows.Count > 0 ? tableDiscountParentItemId.Rows[0][0].ToString() : "";
                                    }
                                    //DiscountAmount = orp_discount_rate / 100 * orp_unit_price * orp_quantity //indirim satırında sadece
                                    //DiscountAmount =(orp_unit_price-orp_price)* orp_quantity 
                                    //DiscountRate //indirim satırında sadece
                                    string itemDiscountRate = Convert.ToDouble(item.orp_discount_rate.ToString()).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture);
                                    string itemDiscountAmount = ((Convert.ToDouble(item.orp_unit_price.ToString()) -
                                                                 Convert.ToDouble(item.orp_price.ToString())) *
                                                                 Convert.ToDouble(item.orp_quantity.ToString())).ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture);
                                    /// for receipt update
                                    receiptDiscountsTotal += (Convert.ToDouble(item.orp_unit_price) - Convert.ToDouble(item.orp_price)) * Convert.ToDouble(item.orp_quantity);

                                    string itemDiscountItemType = "50";
                                    //string itemDiscountParentItemId = tableDiscountParentItemId.Rows[0][0].ToString();
                                    string itemDiscountItemOrderNo = i++.ToString();
                                    string itemDiscountVatIncluded = "0";
                                    /// save discounts 
                                    List<Functions.SqlObj> SqlObjReceiptItemsDiscount = new List<Functions.SqlObj> {
                                         new Functions.SqlObj("OrderReceiptId", itemOrderReceiptId, false),    new Functions.SqlObj("ReceiptType",itemReceiptType, false),           new Functions.SqlObj("ReceiptDate", itemReceiptDate),
                                         new Functions.SqlObj("DiscountRate", itemDiscountRate, false),        new Functions.SqlObj("DiscountAmount", itemDiscountAmount, false),    new Functions.SqlObj("ItemType", itemDiscountItemType, false),
                                         new Functions.SqlObj("ParentItemId", itemDiscountParentItemId, false),new Functions.SqlObj("ItemOrderNo", itemDiscountItemOrderNo,false),   new Functions.SqlObj("VatIncluded", itemDiscountVatIncluded, false),
                                         new Functions.SqlObj("IsReserved", itemIsReserved, false),            new Functions.SqlObj("IsClosed", itemIsClosed, false),                new Functions.SqlObj("IsApproved", itemIsApproved, false),
                                         new Functions.SqlObj("InsertedAt", itemInsertedAt),                   new Functions.SqlObj("InsertedBy", itemInsertedBy, false),

                                    };
                                    Functions.insertToSQL(connString, "Erp_OrderReceiptItem", SqlObjReceiptItemsDiscount.ToArray());

                                }

                            }// foreach item
                        }
                        /// update receipt
                        string queryUpdate2 = string.Format(@"UPDATE Erp_OrderReceipt SET SubTotal = {0}, DiscountsTotal = {1}  WHERE RecId = '{2}'",
                                                            receiptSubTotal.ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture),
                                                            receiptDiscountsTotal.ToString("0.0000", System.Globalization.CultureInfo.InvariantCulture),
                                                            itemOrderReceiptId.ToString());
                        Functions.sendSQLCommand(connString, queryUpdate2);
                        receiptSubTotal = 0;
                        receiptDiscountsTotal = 0;
                    }
                    else {
                        ///donothing
                        labelInfo.Invoke(() => labelInfo.Text = "sipariş sentezde var");
                    }
                }//foreach
                labelInfo2.Invoke(() => labelInfo2.Text = "bitti kapaniyom");

            } ///end of else

            await Task.Delay(DELAY_TIME);
            _isTimerTicked = false;
            return true;

        }
